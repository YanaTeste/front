<?php
/**
 * @file
 * This file is the core of drupalmonitor_connector
 */

DEFINE('DRUPALMONITOR_VERSION', '7.1.10');

/**
 * Implements hook_menu().
 */
function drupalmonitor_connector_menu() {
  $items['drupalmonitor'] = array(
    'title' => 'Drupalmonitor connector',
    'page callback' => 'drupalmonitor_connector_page_data',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'description' => 'Output drupalmonitor metrics',
  );

  $items['admin/config/system/drupalmonitor'] = array(
    'title' => 'Drupalmonitor.com',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalmonitor_connector_settings_form'),
    'access arguments' => array('administer drupalmonitor'),
    'description' => 'Manage settings for Drupalmonitor connector module. (Security hash, Logging)',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function drupalmonitor_connector_permission() {
  return array(
    'administer drupalmonitor' => array(
      'title' => t('View Drupalmonitor settings page'),
      'description' => t('Allow user to change settings on the Drupalmonitor settings page.'),
    ));
}

/**
 * Implements hook_form().
 */
function drupalmonitor_connector_settings_form() {
  $form['drupalmonitor_hash'] = array(
    '#type' => 'textfield',
    '#title' => t('Security Hash (Password)'),
    '#default_value' => variable_get('drupalmonitor_hash'),
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('Set the "password" to protect access to !url1. This security hash should be the same string as in your site settings on !url2.',
     array(
       '!url1' => l(t('/drupalmonitor'), 'drupalmonitor', array('query' => array('hash' => variable_get('drupalmonitor_hash')))),
       '!url2' => l(t('drupalmonitor.com/websites'), "http://www.drupalmonitor.com/websites"),
     )),
  );

  $form['drupalmonitor_performance_monitoring'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable performance monitoring'),
    '#default_value' => variable_get('drupalmonitor_performance_monitoring', 1),
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('If enabled, the drupalmonitor.com module will log all page requests on your Drupal site. Logs are needed to generate load graphs on !url. On high traffic websites, logging can be time consuming and slow your website.', array('!url' => l(t('drupalmonitor.com/websites'), "http://www.drupalmonitor.com/websites"))),
  );

  $form['drupalmonitor_server_monitoring'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable server data'),
    '#default_value' => variable_get('drupalmonitor_server_monitoring', 1),
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('If enabled, the drupalmonitor.com module will monitor server statistics.'),
  );

  $form['drupalmonitor_user_monitoring'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable user data'),
    '#default_value' => variable_get('drupalmonitor_user_monitoring', 1),
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('If enabled, the drupalmonitor.com module will monitor user activity.'),
  );

  $form['drupalmonitor_files_monitoring'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable disk usage data'),
    '#default_value' => variable_get('drupalmonitor_files_monitoring', 1),
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('If enabled, the drupalmonitor.com module will monitor user disk usage.'),
  );

  $form['drupalmonitor_node_monitoring'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable content data'),
    '#default_value' => variable_get('drupalmonitor_node_monitoring', 1),
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('If enabled, the drupalmonitor.com module will monitor content activity.'),
  );

  $form['drupalmonitor_modules_monitoring'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable module update status'),
    '#default_value' => variable_get('drupalmonitor_modules_monitoring', 1),
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('If enabled, the drupalmonitor.com module will monitor module updates.'),
  );

  $form['drupalmonitor_variables_monitoring'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable variables monitoring'),
    '#default_value' => variable_get('drupalmonitor_variables_monitoring', 1),
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('If enabled, the drupalmonitor.com module will monitor variables and Drupal settings.'),
  );

  $form['drupalmonitor_custom_monitoring'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable custom metrics'),
    '#default_value' => variable_get('drupalmonitor_node_monitoring', 1),
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('If enabled, the drupalmonitor.com module will run hook_drupalmonitor() to monitor custom metrics.'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_validate().
 */
function drupalmonitor_connector_settings_form_validate($form, &$form_state) {
  if ($form_state['values']['drupalmonitor_hash'] == '') {
    form_set_error('drupalmonitor_hash', t('You must set a security hash.'));
  }
}

/**
 * Implements drupalmonitor output.
 */
function drupalmonitor_connector_page_data() {

  timer_start('drupalmonitor');
  $hash_request = '';

  if (!empty($_GET['hash'])) {
    $hash_request = $_GET['hash'];
  }
  else {
    drupal_deliver_page(MENU_ACCESS_DENIED);
  }

  $hash_site = variable_get('drupalmonitor_hash');
  if (empty($hash_site)) {
    header('HTTP/1.1 403 Forbidden');
    $info['drupalmonitor_status'] = "NO SECURITY HASH SET ON WEBSITE";
  }
  elseif ($hash_site == $hash_request) {

    require_once dirname(__FILE__) . '/drupalmonitor_connector.user.inc';
    require_once dirname(__FILE__) . '/drupalmonitor_connector.files.inc';
    require_once dirname(__FILE__) . '/drupalmonitor_connector.load.inc';
    require_once dirname(__FILE__) . '/drupalmonitor_connector.status.inc';
    require_once dirname(__FILE__) . '/drupalmonitor_connector.node.inc';
    require_once dirname(__FILE__) . '/drupalmonitor_connector.server.inc';

    // Set correct headers.
    drupal_page_header('Pragma: no-cache');
    drupal_page_header('Expires: 0');

    // Server metrics.
    if (variable_get('drupalmonitor_server_monitoring') == 1) {
      $info['server'] = drupalmonitor_connector_get_serverdata();
    }

    // User user count data.
    if (variable_get('drupalmonitor_user_monitoring') == 1) {
      $info['user']['user_usercount'] = drupalmonitor_connector_get_user_usercount();
      $info['user']['user_activesessioncount_300s'] = drupalmonitor_connector_get_user_activesessioncount_300s();
      $info['user']['user_loggedinsessioncount_300s'] = drupalmonitor_connector_get_user_loggedinsessioncount_300s();
    }

    // Files files count data.
    if (variable_get('drupalmonitor_files_monitoring') == 1) {
      $info['files']['files_filescount'] = drupalmonitor_connector_get_files_filescount();
      $info['files']['files_filesfoldersize'] = drupalmonitor_connector_get_files_filesfoldersize();
    }

    // Load request data.
    if (variable_get('drupalmonitor_performance_monitoring') == 1) {
      $info['performance'] = drupalmonitor_connector_get_loaddata();
    }

    // Node content types data.
    if (variable_get('drupalmonitor_performance_monitoring') == 1) {
      $info['nodes']['drupalmonitor_node_contenttypes'] = drupalmonitor_connector_node_contenttypes();
    }

    // Drupal status.
    if (variable_get('drupalmonitor_modules_monitoring') == 1) {
      $info['tbl_system'] = drupalmonitor_connector_status_listmodules();
    }

    if (variable_get('drupalmonitor_variables_monitoring') == 1) {
      $info['tbl_variable'] = drupalmonitor_connector_status_listvars();
    }

    // Call hook_drupalmonitor().
    if (variable_get('drupalmonitor_custom_monitoring') == 1) {
      $info['custom'] = module_invoke_all('drupalmonitor');
    }

    // Output versions.
    $info['drupalmonitor_version'] = DRUPALMONITOR_VERSION;
    $info['drupalversion'] = VERSION;
    $info['drupalcore'] = DRUPAL_CORE_COMPATIBILITY;

    // Drupalmonitor infos.
    $info['drupalmonitor_executiontime'] = timer_read('drupalmonitor');
    $info['drupalmonitor_status'] = "OK";

    drupal_json_output($info);
    drupal_exit();
  }
  else {
    drupal_deliver_page(MENU_ACCESS_DENIED, 'drupalmonitor_connector_noaccess');
  }
}
/**
 * Returns correct headers if no access.
 */
function drupalmonitor_connector_noaccess() {
  header('HTTP/1.1 403 Forbidden');
  $info['drupalmonitor_status'] = "NO ACCESS";
  drupal_json_output($info);
  drupal_exit();
}

/**
 * Register shutdown function.
 */
function drupalmonitor_connector_boot() {
  register_shutdown_function('drupalmonitor_connector_shutdow');
}

/**
 * Save log entry to db for performance monitoring.
 */
function drupalmonitor_connector_shutdow() {
  if (variable_get('drupalmonitor_memory_monitoring', 1) == 1) {
    db_insert('drupalmonitor_log')
      ->fields(
        array(
          'q' => $_GET['q'],
          'memory' => memory_get_peak_usage(),
          'dt' => REQUEST_TIME,
          'execution_time' => timer_read('page'),
        )
      )
      ->execute();
  }
}
