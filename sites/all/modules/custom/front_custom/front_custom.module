<?php

/**
 * @file
 * Custom blocks, hooks and functions.
 */

/**
 * Implements hook_theme().
 */
 function front_custom_theme($existing, $type, $theme, $path) {
  return array(
    'front_vcard' => array(),
    'front_support' => array(),
    'front_custom_simple_tweet' => array(
      'arguments' => array('tweets' => NULL, 'twitkey' => NULL, 'title' => NULL),
      'template' => 'front-custom-simple-tweet'
      ),
    );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
 function front_custom_ctools_plugin_directory($module, $plugin) {
  return "plugins/$plugin";
}

/**
 * Implements hook_menu_alter().
 */
 function front_custom_menu_alter(&$items) {
  // Workaround for PDOException warning on _menu_router_save() after update to
  // Drupal 7.14
  foreach ($items as $path => $item) {
    if (!isset($item['weight']) || empty($item['weight'])) {
      $items[$path]['weight'] = 0;
    }
  }
}

/**
 * Implements hook_block_info().
 */
 function front_custom_block_info() {
  // Front vCard used on footer.
  $blocks['front_vcard'] = array(
    'info' => t('Front vCard'),
    );
  $blocks['front_support'] = array(
    'info' => t('Front Contact/Support'),
    );
  $blocks['front_contact'] = array(
    'info' => t('Front Contact Form'),
    );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
 function front_custom_block_configure($delta = '') {
  $form = array();

  if ($delta == 'front_vcard') {
    $vcard = array(
      'given_name' => '',
      'organization_name' => '',
      'street_address' => '',
      'locality' => '',
      'region' => '',
      'postal_code' => '',
      'country' => '',
      'url' => '',
      'twitter' => '',
      'facebook' => '',
      'googleplus' => '',
      );
    $front_vcard = variable_get('front_vcard', '');

    foreach ($vcard as $key => $value) {
      if (isset($front_vcard[$key])) {
        $vcard[$key] = $front_vcard[$key];
      }
    }

    $form['vcard'] = array(
      '#type' => 'fieldset',
      '#title' => t('vCard'),
      '#collapsible' => FALSE,
      );

    $form['vcard']['given_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Given name'),
      '#size' => 40,
      '#maxlength' => 255,
      '#default_value' => $vcard['given_name'],
      );
    $form['vcard']['organization_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Organization name'),
      '#size' => 40,
      '#maxlength' => 255,
      '#default_value' => $vcard['organization_name'],
      );

    // Address.
    $form['vcard']['address'] = array(
      '#type' => 'fieldset',
      '#title' => t('Address'),
      '#collapsible' => FALSE,
      );

    $form['vcard']['address']['street_address'] = array(
      '#type' => 'textfield',
      '#title' => t('Street address'),
      '#size' => 40,
      '#maxlength' => 255,
      '#default_value' => $vcard['street_address'],
      );
    $form['vcard']['address']['locality'] = array(
      '#type' => 'textfield',
      '#title' => t('Locality'),
      '#size' => 40,
      '#maxlength' => 255,
      '#default_value' => $vcard['locality'],
      );
    $form['vcard']['address']['region'] = array(
      '#type' => 'textfield',
      '#title' => t('Region'),
      '#size' => 40,
      '#maxlength' => 255,
      '#default_value' => $vcard['region'],
      );
    $form['vcard']['address']['postal_code'] = array(
      '#type' => 'textfield',
      '#title' => t('Postal code'),
      '#size' => 20,
      '#maxlength' => 20,
      '#default_value' => $vcard['postal_code'],
      );
    $form['vcard']['address']['country'] = array(
      '#type' => 'textfield',
      '#title' => t('Country'),
      '#size' => 40,
      '#maxlength' => 255,
      '#default_value' => $vcard['country'],
      );

    // Social links.
    $form['vcard']['social_links'] = array(
      '#type' => 'fieldset',
      '#title' => t('Social links'),
      '#collapsible' => FALSE,
      );

    $form['vcard']['social_links']['url'] = array(
      '#type' => 'textfield',
      '#title' => t('Url'),
      '#size' => 40,
      '#maxlength' => 255,
      '#default_value' => $vcard['url'],
      );
    $form['vcard']['social_links']['twitter'] = array(
      '#type' => 'textfield',
      '#title' => t('Twitter'),
      '#size' => 40,
      '#maxlength' => 255,
      '#default_value' => $vcard['twitter'],
      );
    $form['vcard']['social_links']['facebook'] = array(
      '#type' => 'textfield',
      '#title' => t('Facebook'),
      '#size' => 40,
      '#maxlength' => 255,
      '#default_value' => $vcard['facebook'],
      );
    $form['vcard']['social_links']['googleplus'] = array(
      '#type' => 'textfield',
      '#title' => t('Google+'),
      '#size' => 40,
      '#maxlength' => 255,
      '#default_value' => $vcard['googleplus'],
      );
  }
  elseif ($delta == 'front_support') {
    $support = array(
      'text' => '',
      'contact_label' => '',
      'contact_link' => '',
      'support_label' => '',
      'support_link' => '',
      );
    $front_support = variable_get('front_support', '');

    foreach ($support as $key => $value) {
      if (isset($front_support[$key])) {
        $support[$key] = $front_support[$key];
      }
    }

    $form['text'] = array(
      '#type' => 'text_format',
      '#title' => t('Contact / Support text'),
      '#cols' => 60,
      '#rows' => 5,
      '#default_value' => (isset($support['text']['value'])) ? $support['text']['value'] : $support['text'],
      '#format' => (isset($support['text']['format'])) ? $support['text']['format'] : NULL,
      );
    $form['contact'] = array(
      '#type' => 'fieldset',
      '#title' => t('Contact'),
      '#collapsible' => FALSE,
      );
    $form['contact']['contact_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Label'),
      '#size' => 40,
      '#maxlength' => 255,
      '#default_value' => $support['contact_label'],
      );
    $form['contact']['contact_link'] = array(
      '#type' => 'textfield',
      '#title' => t('Link'),
      '#size' => 40,
      '#maxlength' => 255,
      '#default_value' => $support['contact_link'],
      );
    $form['support'] = array(
      '#type' => 'fieldset',
      '#title' => t('Support'),
      '#collapsible' => FALSE,
      );
    $form['support']['support_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Label'),
      '#size' => 40,
      '#maxlength' => 255,
      '#default_value' => $support['support_label'],
      );
    $form['support']['support_link'] = array(
      '#type' => 'textfield',
      '#title' => t('Link'),
      '#size' => 40,
      '#maxlength' => 255,
      '#default_value' => $support['support_link'],
      );
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
 function front_custom_block_save($delta = '', $edit = array()) {
  // This example comes from node.module.
  if ($delta == 'front_vcard') {
    $vcard = array(
      'given_name' => '',
      'organization_name' => '',
      'street_address' => '',
      'locality' => '',
      'region' => '',
      'postal_code' => '',
      'country' => '',
      'url' => '',
      'twitter' => '',
      'facebook' => '',
      'googleplus' => '',
      );

    foreach ($vcard as $key => $value) {
      if (isset($edit[$key])) {
        $vcard[$key] = check_plain($edit[$key]);
      }
    }
    variable_set('front_vcard', $vcard);
  }
  elseif ($delta == 'front_support') {
    $support = array(
      'text' => '',
      'contact_label' => '',
      'contact_link' => '',
      'support_label' => '',
      'support_link' => '',
      );

    foreach ($support as $key => $value) {
      if (isset($edit[$key])) {
        if ($key == 'text') {
          $support[$key] = $edit[$key];
        }
        else {
          $support[$key] = check_plain($edit[$key]);
        }
      }
    }
    variable_set('front_support', $support);
  }
}

/**
 * Implements hook_block_view().
 */
 function front_custom_block_view($delta = '') {
  // This example comes from node.module. Note that you can also return a
  // renderable array rather than rendered HTML for 'content'.
  $block = array();

  switch ($delta) {
    case 'front_vcard':
    $block['subject'] = t('vCard');
    $block['content'] = theme('front_vcard');
    break;

    case 'front_support':
    $block['subject'] = t('Front Support');
    $block['content'] = theme('front_support');
    break;

    case 'front_contact':
    $block['subject'] = t('Contact us');
    $block['content'] = drupal_get_form('front_custom_contact_form');
    break;

  }
  return $block;
}

/**
 * Return vCard data as a hCard.
 */
 function theme_front_vcard() {
  $v = variable_get('front_vcard', '');

  if (empty($v)) return;

  $hcard = '<div id="hcard-' . strtolower($v['given_name']) . '" class="vcard">';

  if (!empty($v['url'])) {
    $hcard .= '<a class="url fn" href="' . $v['url'] . '">';
    $hcard .= '<span class="given-name">' . $v['given_name'] . '</span></a>';
  }
  else {
    $hcard .= '<span class="given-name">' . $v['given_name'] . '</span>';
  }

  if (!empty($v['organization_name'])) {
    $hcard .= ' <span class="org">' . $v['organization_name'] . '</span>';
  }

  $hcard .= '<span class="adr">
  <span class="street-address">' . $v['street_address'] . '</span>,
  <span class="postal-code">' . $v['postal_code'] . '</span>
  <span class="locality">' . $v['locality'] . '</span>
  <span class="region">' . $v['region'] . '</span>,
  <span class="country-name">' . $v['country'] . '</span>
  </span>';

  if (!empty($v['twitter']) || !empty($v['facebook'])) {
    $hcard .= '<div class="social-links">' . t('Follow us on');
    if (!empty($v['twitter'])) {
      $hcard .= ' <a class="twitter url" href="' . $v['twitter'] . '">Twitter</a>';
    }
    if (!empty($v['facebook'])) {
      $hcard .= ' <a class="facebook url" href="' . $v['facebook'] . '">Facebook</a>';
    }
    if (!empty($v['googleplus'])) {
      $hcard .= ' <a class="googleplus url" href="' . $v['googleplus'] . '">Google+</a>';
    }
    $hcard .= '</div>';
  }

  $hcard .= '</div>';

  return $hcard;
}

/**
 * Return contact and support information.
 */
 function theme_front_support() {
  $support = variable_get('front_support', '');

  if (empty($support)) return;

  $links = array();
  $output = '';

  if (isset($support['text']['value'])) {
    $output .= check_markup($support['text']['value'], $support['text']['format']);
  }

  if (!empty($support['contact_link'])) {
    $links['contact'] = array(
      'href'  => $support['contact_link'],
      'title' => $support['contact_label'],
      );
  }
  if (!empty($support['support_link'])) {
    $links['support'] = array(
      'href'  => $support['support_link'],
      'title' => $support['support_label'],
      );
  }

  if (!empty($links)) {
    $output .= theme('links', array('links' => $links));
  }

  if (!empty($output)) {
    return '<article>' . $output . '</article>';
  }
}

/**
 * Implementation of hook_twitter_pull_blocks().
 */
 function front_custom_twitter_pull_blocks() {
  return array(
    0 => (object) array(
      'delta' => 'front_custom_twitter_pull',
      'tweetkey' => '@frontkom',
      'title' => t('FrontKom on Twitter'),
      'name' => t('FrontKom on Twitter'),
      'number_of_items' => '1',
      'theme_key' => 'front_custom_simple_tweet',
      ),
    );
}

/**
 * This hook is called right before the render process.
 */
 function front_custom_views_pre_render(&$view) {
  // Make sure we pass the normal path so the comparison
  // on the l() function returns true on active menu items.
  if ($view->name == 'services_block' && $view->current_display == 'menu') {
    foreach ($view->result as $key => $row) {
      $raw_url = &$view->result[$key]->field_field_link[0]['raw']['url'];
      $raw_url = drupal_get_normal_path($raw_url);
    }
  }
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
 function front_custom_preprocess_views_view_fields(&$vars) {
  if ($vars['view']->name == 'home_featured') {
    $title = &$vars['fields']['title'];
    $title->content = front_custom_convert2markup($title->raw);
  }
}

/**
 * Custom function to convert special characters to markup
 * like markdown style :)
*/
function front_custom_convert2markup($text) {
  $search = array(
    '/\*(.*?)\*/',
    '/\*\*(.*?)\*\*/',
    '/\\\/',
    );
  $replace = array(
    '<em>\\1</em>',
    '<strong>\\1</strong>',
    '<br>',
    );
  $markup = preg_replace($search, $replace, $text);

  return $markup;
}

function front_custom_panels_pre_render($display) {
  // Render node full view mode to trigger hook_node_view() and get Metatags
  // working on node panels overrides.
  if (isset($display->context['argument_entity_id:node_1'])) {
    $nid = $display->context['argument_entity_id:node_1']->argument;

    if (is_numeric($nid)) {
      $node = node_load($nid);
      $node_view = node_view($node);
    }
  }
}


function front_custom_contact_form($form, &$form_state) {

  // Hidden fields
  $form['FORM_ID'] = array(
    '#type' => 'hidden',
    '#value' =>  '95f0d613-2476-4776-b617-08177412460e'
    );
  $form['COMPLETE_URL'] = array(
    '#type' => 'hidden',
    '#value' => 'http://www.frontkom.no'
    );

  // User input fields
  $form['FIRST_NAME'] = array(
    '#title' => t('First Name'),
    '#attributes' => array(
      'placeholder' => t('First Name'),
      ),
    '#type' => 'textfield',
    '#required' => true,
    );
  $form['LAST_NAME'] = array(
    '#title' => t('Last Name'),
    '#attributes' => array(
      'placeholder' => t('Last Name'),
      ),
    '#type' => 'textfield',
    '#required' => true,
    );
  $form['EMAIL'] = array(
    '#title' => t('Email'),
    '#attributes' => array(
      'placeholder' => t('Email'),
      ),
    '#type' => 'textfield',
    '#required' => true,
    );
  $form['PHONE'] = array(
    '#title' => t('Phone'),
    '#attributes' => array(
      'placeholder' => t('Phone'),
      ),
    '#type' => 'textfield',
    '#required' => false,
    );
  $form['NOTE'] = array(
    '#title' => t('Message'),
    '#attributes' => array(
      'placeholder' => t('Message'),
      ),
    '#type' => 'textarea',
    '#required' => TRUE,
    '#resizable' => false
    );

  // Submit
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Send',
    );

  // $form['#action'] = url('https://service.capsulecrm.com/service/newlead', array('external' => true));;
  return $form;
}
function front_custom_contact_form_validate($form, &$form_state){
  // Not necessary
}
function front_custom_contact_form_submit($form, &$form_state){

  // use of drupal_http_request 
  $url = url('https://service.capsulecrm.com/service/newlead', array('external' => true));
  $headers = array('Content-Type' => 'application/x-www-form-urlencoded');

  $relevant_arguments = array('FORM_ID', 'COMPLETE_URL', 'FIRST_NAME', 'LAST_NAME', 'EMAIL', 'PHONE', 'NOTE');
  $submit_data = array();
  foreach($form_state['values'] as $key => $value){
    if (in_array($key, $relevant_arguments)){
      $submit_data[$key] = $value;
    }
  }

  $data = http_build_query($submit_data, '', '&');
  
  // the actual sending of the data
  $response = drupal_http_request(
   $url, 
   array(
     'headers' => $headers, 
     'method' => 'POST', 
     'data' => $data
     )
   ); 
}

function front_custom_mollom_form_list(){
  $forms['front_custom_contact_form'] = array(
    'title' => t('Contact form (To CRM, Built in code)')
    );
  return $forms;
}

function front_custom_mollom_form_info() {
  $form_info = array(
    'mode' => MOLLOM_MODE_ANALYSIS,
    'bypass access' => array('administer privatemsg'),
    'report access' => array('report private messages to mollom'),
    'elements' => array(
      'FIRST_NAME' => t('First name'),
      'LAST_NAME' => t('Last name'),
      'EMAIL' => t('Email'),
      'PHONE' => t('Phone'),
      'NOTE' => t('Note'),
      ),
    'mapping' => array(
      'post_id' => 'mid',
      'post_title' => 'subject',
      ),
    );

  return $form_info;
}